"use strict";(self.webpackChunkaptos_docs=self.webpackChunkaptos_docs||[]).push([[150],{3905:(t,e,a)=>{a.d(e,{Zo:()=>u,kt:()=>k});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function i(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function d(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function l(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},i=Object.keys(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var p=n.createContext({}),o=function(t){var e=n.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):d(d({},e),t)),a},u=function(t){var e=o(t.components);return n.createElement(p.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},c=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,i=t.originalType,p=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),c=o(a),k=r,g=c["".concat(p,".").concat(k)]||c[k]||m[k]||i;return a?n.createElement(g,d(d({ref:e},u),{},{components:a})):n.createElement(g,d({ref:e},u))}));function k(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=a.length,d=new Array(i);d[0]=c;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=t,l.mdxType="string"==typeof t?t:r,d[1]=l;for(var o=2;o<i;o++)d[o]=a[o];return n.createElement.apply(null,d)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},1548:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>d,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var n=a(7462),r=(a(7294),a(3905));const i={title:"MoveDID Contract",slug:"/move-did-contract",sidebar_position:1,hidden:!0,hide_table_of_contents:!1},d="MoveDID Contract(TODO: update)",l={unversionedId:"move-did-contract",id:"move-did-contract",title:"MoveDID Contract",description:"See Source Files in:",source:"@site/docs/move-did-contract.md",sourceDirName:".",slug:"/move-did-contract",permalink:"/move-did-contract",draft:!1,editUrl:"https://github.com/NonceGeek/MoveDID/docs/move-did-contract.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"MoveDID Contract",slug:"/move-did-contract",sidebar_position:1,hidden:!0,hide_table_of_contents:!1},sidebar:"defaultSidebar",previous:{title:"MoveDID Documentation",permalink:"/"},next:{title:"MoveDID Audit Report",permalink:"/move-did-audit-report"}},p={},o=[{value:"0x00 Function Summary Table",id:"0x00-function-summary-table",level:2},{value:"0x01 ABI Documentation of MoveDID",id:"0x01-abi-documentation-of-movedid",level:2},{value:"1.1 Addr Aggregator",id:"11-addr-aggregator",level:3},{value:"1.1.1 Functions about Addr Aggregator",id:"111-functions-about-addr-aggregator",level:4},{value:"1.1.2 Functions about Addr",id:"112-functions-about-addr",level:4},{value:"1.2 Service Aggregator",id:"12-service-aggregator",level:3},{value:"1.3 Addr-*",id:"13-addr-",level:3},{value:"1.4 Init",id:"14-init",level:3},{value:"0x02 Quick Deployment Guide",id:"0x02-quick-deployment-guide",level:2},{value:"0x03 Prover of MoveDID",id:"0x03-prover-of-movedid",level:2}],u={toc:o};function m(t){let{components:e,...a}=t;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"movedid-contracttodo-update"},"MoveDID Contract(TODO: update)"),(0,r.kt)("p",null,"See Source Files in:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/NonceGeek/MoveDID/tree/main/did-aptos"},"https://github.com/NonceGeek/MoveDID/tree/main/did-aptos"))),(0,r.kt)("h2",{id:"0x00-function-summary-table"},"0x00 Function Summary Table"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Module/Function Name"),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Modifier")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Args")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"init")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"-")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"-"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"init"),(0,r.kt)("td",{parentName:"tr",align:null},"public entry fun"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"acct: &signer, type: u64, description: String"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"addr_aggregator")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"-")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"-"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"create_addr_aggregator"),(0,r.kt)("td",{parentName:"tr",align:null},"public entry fun"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"acct: &signer, type: u64, description: String"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"update_addr_aggregator_description"),(0,r.kt)("td",{parentName:"tr",align:null},"public entry fun"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"acct: &signer, description: String"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"add_addr"),(0,r.kt)("td",{parentName:"tr",align:null},"public entry fun"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"acct: &signer, addr_type: u64, addr: String, pubkey: String, chains: vector<String>, description: String, expire_second : u64"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"do_add_addr"),(0,r.kt)("td",{parentName:"tr",align:null},"fun"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addr_aggr: &mut AddrAggregator,send_addr : address, addr_type: u64, addr: String, pubkey: String, chains: vector<String>, description: String, expire_second : u64"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"batch_add_addrs"),(0,r.kt)("td",{parentName:"tr",align:null},"public entry fun"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"acct: &signer, addrs: vector<String>, addr_types: vector<u64>, pubkeys: vector<String>, chains_vec: vector<vector<String>>, descriptions: vector<String>, expire_seconds: vector<u64>"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"exist_addr_by_map"),(0,r.kt)("td",{parentName:"tr",align:null},"fun"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addr_infos_map: &mut Table<String, AddrInfo>, addr: String"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"update_eth_addr"),(0,r.kt)("td",{parentName:"tr",align:null},"public entry fun"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(acct: &signer, addr: String, signature: String)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"update_aptos_addr"),(0,r.kt)("td",{parentName:"tr",align:null},"public entry fun"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(acct: &signer, addr: String, signature: String)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"update_addr_info_with_chains_and_description"),(0,r.kt)("td",{parentName:"tr",align:null},"public entry fun"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"update_addr_info_for_non_verification"),(0,r.kt)("td",{parentName:"tr",align:null},"public entry fun"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"acct: &signer, addr: String, chains: vector<String>, description: String"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"delete_addr"),(0,r.kt)("td",{parentName:"tr",align:null},"public entry fun"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"acct: &signer, addr: String"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"addr_aptos")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"-")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"-"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"update_addr"),(0,r.kt)("td",{parentName:"tr",align:null},"public(friend) fun",(0,r.kt)("br",null),"* friend my_addr::addr_aggregator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addr_info: &mut AddrInfo, signature: &mut String"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"addr_eth")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"-")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"-"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"update_addr"),(0,r.kt)("td",{parentName:"tr",align:null},"public(friend) fun",(0,r.kt)("br",null),"* friend my_addr::addr_aggregator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addr_info: &mut AddrInfo, signature: &mut String"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"eth_sig_verifier")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"-")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"-"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"verify_eth_sig"),(0,r.kt)("td",{parentName:"tr",align:null},"public fun",(0,r.kt)("br",null)," ","#","[view]"),(0,r.kt)("td",{parentName:"tr",align:null},"//TODO")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pubkey_to_address"),(0,r.kt)("td",{parentName:"tr",align:null},"fun"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pk_bytes: vector<u8>"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"addr_info")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"-")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"-"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"init_addr_info"),(0,r.kt)("td",{parentName:"tr",align:null},"public fun // TODO:check?"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"check_addr_prefix"),(0,r.kt)("td",{parentName:"tr",align:null},"#","[view]"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"equal_addr"),(0,r.kt)("td",{parentName:"tr",align:null},"#","[view]"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"set_sign_and_updated_at"),(0,r.kt)("td",{parentName:"tr",align:null},"// TODO: check\uff1f"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"update_addr_info_with_chains_and_description"),(0,r.kt)("td",{parentName:"tr",align:null},"// TODO: check\uff1f"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"update_addr_info_for_non_verification"),(0,r.kt)("td",{parentName:"tr",align:null},"// TODO: check\uff1f"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"service_aggregator")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"-")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"-"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"create_service_aggregator"),(0,r.kt)("td",{parentName:"tr",align:null},"public entry fun"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"acct: &signer"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"add_service"),(0,r.kt)("td",{parentName:"tr",align:null},"public entry fun"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"acct: &signer, name: String, url: String, description: String, verification_url: String, expire_second: u64"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"do_add_service"),(0,r.kt)("td",{parentName:"tr",align:null},"fun"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"service_aggr: &mut ServiceAggregator, name: String, url: String, description: String, verification_url: String, expire_second: u64"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"batch_add_services"),(0,r.kt)("td",{parentName:"tr",align:null},"public entry fun"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"acct: &signer, names: vector<String>, urls: vector<String>, descriptions : vector<String>, verification_urls: vector<String>, expire_second_vec: vector<u64>"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"update_service"),(0,r.kt)("td",{parentName:"tr",align:null},"public entry fun"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"acct: &signer, name: String, new_description: String, new_url: String, new_verification_url: String"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"delete_service"),(0,r.kt)("td",{parentName:"tr",align:null},"public entry fun"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"acct: &signer, name: String"))))),(0,r.kt)("h2",{id:"0x01-abi-documentation-of-movedid"},"0x01 ABI Documentation of MoveDID"),(0,r.kt)("p",null,"In the Aptos Move contract(modules), methods marked as ",(0,r.kt)("inlineCode",{parentName:"p"},"public entry fun")," are publicly accessible."),(0,r.kt)("p",null,"The main entry in the MoveDID contract  are two modules: "),(0,r.kt)("p",null,"the ",(0,r.kt)("inlineCode",{parentName:"p"},"addr_aggregator")," module and the ",(0,r.kt)("inlineCode",{parentName:"p"},"service_aggregator")," module."),(0,r.kt)("h3",{id:"11-addr-aggregator"},"1.1 Addr Aggregator"),(0,r.kt)("p",null,"Namespace: ",(0,r.kt)("inlineCode",{parentName:"p"},"my_addr::addr_aggregator")),(0,r.kt)("h4",{id:"111-functions-about-addr-aggregator"},"1.1.1 Functions about Addr Aggregator"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"create_addr_aggregator(acct: &signer, type: u64, description: String)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"Create the resource addr aggregator. The struct of addr aggregator:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"struct AddrAggregator has key {\n  key_addr: address,\n  addr_infos_map: Table<String, AddrInfo>,\n  addrs: vector<String>,\n  type: u64,\n  description: String,\n  max_id: u64,\n  add_addr_event_set: AddAddrEventSet,\n  update_addr_signature_event_set: UpdateAddrSignatureEventSet,\n  update_addr_event_set: UpdateAddrEventSet,\n  delete_addr_event_set: DeleteAddrEventSet,\n}\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"params description:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"description:")," the description of did."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"type:")," to distinct diffrent subjects of did: ",(0,r.kt)("inlineCode",{parentName:"li"},"HUMAN -- 0, ORG -- 1, ROBOT --  2"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"update_addr_aggregator_description(acct: &signer, description: String)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"params description:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"description:")," the description of did.")))),(0,r.kt)("h4",{id:"112-functions-about-addr"},"1.1.2 Functions about Addr"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"add_addr(acct: &signer, addr_type: u64, addr: String, pubkey: String, chains: vector<String>, description: String)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"Add a new addr. The addr without signature can be used as deposit address,"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"params description:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"addr_type:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"Ethereum -- 0, Aptos --1"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"addr:")," the address you would like to add to did, it should be begin with ",(0,r.kt)("inlineCode",{parentName:"li"},"0x"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"pubkey:")," using in key-pairs that can not recovery pubkey from signature."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"chains:")," where do you use this addr on? for example: ",(0,r.kt)("inlineCode",{parentName:"li"},'["ethereum", "polygon"]')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"description: "),"the description of the addr you added."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"update_eth_addr(acct: &signer, addr: String, signature: String) ")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"Update the eth addr that add by ",(0,r.kt)("inlineCode",{parentName:"p"},"add_addr"),", the msg can be saw in ",(0,r.kt)("inlineCode",{parentName:"p"},"AddrAggregator")," resource."),(0,r.kt)("p",{parentName:"li"},"The address updated with sig could use in more scenes.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"update_aptos_addr(acct: &signer, addr: String, signature: String)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"same as ",(0,r.kt)("inlineCode",{parentName:"p"},"update-eth-addr"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"update_addr_info_with_chains_and_description(acct: &signer, addr: String, chains: vector<String>, description: String)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"update addr info with the chains and description. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"update_addr_info_for_non_verification(acct: &signer, addr: String, chains: vector<String>, description: String)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"It's able to update the addr info that is non verification, such as the token receiver address.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"delete_addr(acct: &signer, addr: String)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"delete addr that is added.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"batch_add_addrs(acct: &signer, addrs: vector<String>, addr_infos: vector<AddrInfo>)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"add addrs in batch way!"))),(0,r.kt)("h3",{id:"12-service-aggregator"},"1.2 Service Aggregator"),(0,r.kt)("p",null,"Namespace: ",(0,r.kt)("inlineCode",{parentName:"p"},"my_addr::service_aggregator")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"create_service_aggregator(acct: &signer)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"Create the resource addr aggregator. The struct of addr aggregator:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"struct Service has store, copy, drop {\n  url: String,\n  description: String,\n  verification_url: String\n}\n\nstruct ServiceAggregator has key {\n  key_addr: address,\n  services_map: Table<String, Service>,\n  names: vector<String>,\n  add_service_event_set: AddServiceEventSet,\n  update_service_event_set: UpdateServiceEventSet,\n  delete_service_event_set: DeleteServiceEventSet,\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"add_service(acct: &signer, url: String, description: String, verification_url: String"),")"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"Add a new service. It's optional to verify the service by msg and verification_url. For example, verify the github account by gist with msg."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"params description:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"url:")," the link of service url.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"description:")," the description of service")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"verification_url:")," the link of verification of url, the key addr is the msg for payload.")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"update_service(acct: &signer, url: String, new_description: String, new_url: String, new_verification_url: String)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"Update the eth service that indexed by the url.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"delete_service(acct: &signer, url: String)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"delete service that is added.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"batch_add_services(acct: &signer, names: vector<String>, services: vector<Service> )")))),(0,r.kt)("h3",{id:"13-addr-"},"1.3 Addr-*"),(0,r.kt)("p",null,"Namespace: ",(0,r.kt)("inlineCode",{parentName:"p"},"my_addr::addr-*"),", such as:",(0,r.kt)("inlineCode",{parentName:"p"},"my_addr:addr-aptos")),(0,r.kt)("p",null,"Impl ",(0,r.kt)("inlineCode",{parentName:"p"},"addr-*")," module to support more type of address!"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"update_addr(addr_info: &mut AddrInfo, signature: &mut String)")),(0,r.kt)("p",{parentName:"li"},"type: ",(0,r.kt)("inlineCode",{parentName:"p"},"public func")),(0,r.kt)("p",{parentName:"li"},"update addr with signature.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"update_*_addr(acct: &signer, addr: String, signature: String)")),(0,r.kt)("p",{parentName:"li"},"update addr func that can be called by signer."))),(0,r.kt)("h3",{id:"14-init"},"1.4 Init"),(0,r.kt)("p",null,"Namespace:",(0,r.kt)("inlineCode",{parentName:"p"},"my_addr::init")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"init(acct: &signer, type: u64, description: String)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"Init addr_aggregator and service_aggregator in one func."))),(0,r.kt)("h2",{id:"0x02-quick-deployment-guide"},"0x02 Quick Deployment Guide"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Aptos CLI version >=1.0.0")),(0,r.kt)("p",null,"see the latest official guide in:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://aptos.dev/cli-tools/aptos-cli-tool/use-aptos-cli"},"https://aptos.dev/cli-tools/aptos-cli-tool/use-aptos-cli"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"step 0x01: run a local testnet")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"aptos node run-local-testnet --with-faucet\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"step 0x02: create an account")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"aptos init --profile local --rest-url http://localhost:8080 --faucet-url http://localhost:8081\nexport PROFILE=local\n")),(0,r.kt)("p",null,"Tips -- reset local network"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"aptos node run-local-testnet --with-faucet --force-restart\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"step 0x03: get faucet(devnet)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"aptos account fund-with-faucet --profile $PROFILE --account $PROFILE\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"step 0x04: compile contract")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"aptos move compile --package-dir [path]/MoveDID/did-aptos --named-addresses my_addr=$PROFILE\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"step 0x05: deploy")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"aptos move publish --package-dir [path]/MoveDID/did-aptos --named-addresses my_addr=$PROFILE --profile $PROFILE\n")),(0,r.kt)("h2",{id:"0x03-prover-of-movedid"},"0x03 Prover of MoveDID"),(0,r.kt)("p",null,"see in all the files that ended with ",(0,r.kt)("inlineCode",{parentName:"p"},"spec.move"),"."))}m.isMDXComponent=!0}}]);