"use strict";(self.webpackChunkaptos_docs=self.webpackChunkaptos_docs||[]).push([[749],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>u});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),m=l(r),u=a,g=m["".concat(p,".").concat(u)]||m[u]||s[u]||i;return r?n.createElement(g,o(o({ref:t},c),{},{components:r})):n.createElement(g,o({ref:t},c))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var d={};for(var p in t)hasOwnProperty.call(t,p)&&(d[p]=t[p]);d.originalType=e,d.mdxType="string"==typeof e?e:a,o[1]=d;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},34:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>s,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const i={title:"MoveDID Contract",slug:"/movedid-contract",hidden:!0,hide_table_of_contents:!1},o="MoveDID Contract",d={unversionedId:"movedid-contract",id:"movedid-contract",title:"MoveDID Contract",description:"0x01 ABI Documentation of MoveDID",source:"@site/docs/movedid-contract.md",sourceDirName:".",slug:"/movedid-contract",permalink:"/movedid-contract",draft:!1,editUrl:"https://github.com/NonceGeek/MoveDID/docs/movedid-contract.md",tags:[],version:"current",frontMatter:{title:"MoveDID Contract",slug:"/movedid-contract",hidden:!0,hide_table_of_contents:!1},sidebar:"defaultSidebar",previous:{title:"MoveDID White Paper",permalink:"/move-did-white-paper-index"}},p={},l=[{value:"0x01 ABI Documentation of MoveDID",id:"0x01-abi-documentation-of-movedid",level:2},{value:"1.1 Addr Aggregator",id:"11-addr-aggregator",level:3},{value:"1.2 Endpoint Aggregator",id:"12-endpoint-aggregator",level:3},{value:"0x02 How to Append Module Dynamic?",id:"0x02-how-to-append-module-dynamic",level:2},{value:"0x03 Source Code Analysis",id:"0x03-source-code-analysis",level:2},{value:"0x04 Prover of MoveDID",id:"0x04-prover-of-movedid",level:2}],c={toc:l};function s(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"movedid-contract"},"MoveDID Contract"),(0,a.kt)("h2",{id:"0x01-abi-documentation-of-movedid"},"0x01 ABI Documentation of MoveDID"),(0,a.kt)("p",null,"In the Aptos Move contract(modules), methods marked as ",(0,a.kt)("inlineCode",{parentName:"p"},"public entry fun")," are publicly accessible."),(0,a.kt)("p",null,"The main entry in the MoveDID contract  are two modules: "),(0,a.kt)("p",null,"the ",(0,a.kt)("inlineCode",{parentName:"p"},"addr_aggregator")," module and the ",(0,a.kt)("inlineCode",{parentName:"p"},"endpoint_aggregator")," module."),(0,a.kt)("h3",{id:"11-addr-aggregator"},"1.1 Addr Aggregator"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"create_addr_aggregator(acct: &signer, type: u64, description: String)")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"func description:")),(0,a.kt)("p",{parentName:"li"},"Create the resource addr aggregator. The struct of addr aggregator:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"struct AddrAggregator has key {\n  key_addr: address,\n  addr_infos: vector<AddrInfo>,\n  type: u64,\n  description: String,\n  max_id: u64,\n}\nstruct AddrInfo has store, copy, drop {\n  addr: String,\n  description: String,\n  chains: vector<String>,\n  msg: String,\n  signature: vector<u8>,\n  created_at: u64,\n  updated_at: u64,\n  id: u64,\n  addr_type: u64,\n}\n")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"params description:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"description:")," the description of did."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"type:")," to distinct diffrent subjects of did: ",(0,a.kt)("inlineCode",{parentName:"li"},"HUMAN -- 0, ORG -- 1, ROBOT --  2"),"."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"add_addr(acct: &signer, addr_type: u64, addr: String,chains: vector<String>, description: String)")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"func description:")),(0,a.kt)("p",{parentName:"li"},"Add a new addr. The addr without signature can be used as deposit address,"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"params description:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"addr_type:")," ",(0,a.kt)("inlineCode",{parentName:"li"},"Ethereum -- 0, Aptos --1"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"addr:")," the address you would like to add to did."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"chains:")," where do you use this addr on? for example: ",(0,a.kt)("inlineCode",{parentName:"li"},'["ethereum", "polygon"]')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"description: "),"the description of the addr you added."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"update_eth_addr(acct: &signer, addr: String, signature: String) ")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"func description:")),(0,a.kt)("p",{parentName:"li"},"Update the eth addr that add by ",(0,a.kt)("inlineCode",{parentName:"p"},"add_addr"),", the msg can be saw in ",(0,a.kt)("inlineCode",{parentName:"p"},"AddrAggregator")," resource."),(0,a.kt)("p",{parentName:"li"},"The address updated with sig could use in more scenes.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"update_aptos_addr(acct: &signer, addr: String, signature: String, pubkey: String)")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"func description:")),(0,a.kt)("p",{parentName:"li"},"same as ",(0,a.kt)("inlineCode",{parentName:"p"},"update-eth-addr"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"delete_addr(acct: &signer, addr: String)")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"func description:")),(0,a.kt)("p",{parentName:"li"},"delete addr that is added."))),(0,a.kt)("h3",{id:"12-endpoint-aggregator"},"1.2 Endpoint Aggregator"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"create_endpoint_aggregator(acct: &signer)")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"func description:")),(0,a.kt)("p",{parentName:"li"},"Create the resource addr aggregator. The struct of addr aggregator:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"struct Endpoint has store, copy, drop {\n  url: String,\n  description: String,\n  msg: String,\n  verification_url: String\n}\nstruct EndpointAggregator has key {\n  key_addr: address,\n  endpoints: vector<Endpoint>\n}\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"add_endpoint(acct: &signer, url: String, description: String, verification_url: String"),")"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"func description:")),(0,a.kt)("p",{parentName:"li"},"Add a new endpoint. It's optional to verify the endpoint by msg and verification_url. For example, verify the github account by gist with msg."),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"params description:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"description:")," the description of endpoint"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"verification_url:")," the link of verification of url, the key addr is the msg for payload."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"update_endpoint(acct: &signer, url: String, new_description: String,new_url: String, new_verification_url: String)")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"func description:")),(0,a.kt)("p",{parentName:"li"},"Update the eth endpoint that indexed by the url.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"delete_endpoint(acct: &signer, url: String)")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"func description:")),(0,a.kt)("p",{parentName:"li"},"delete endpoint that is added."))),(0,a.kt)("h2",{id:"0x02-how-to-append-module-dynamic"},"0x02 How to Append Module Dynamic?"),(0,a.kt)("h2",{id:"0x03-source-code-analysis"},"0x03 Source Code Analysis"),(0,a.kt)("h2",{id:"0x04-prover-of-movedid"},"0x04 Prover of MoveDID"))}s.isMDXComponent=!0}}]);