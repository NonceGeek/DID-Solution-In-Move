"use strict";(self.webpackChunkaptos_docs=self.webpackChunkaptos_docs||[]).push([[150],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),l=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(o.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,k=u["".concat(o,".").concat(m)]||u[m]||s[m]||i;return n?a.createElement(k,p(p({ref:t},c),{},{components:n})):a.createElement(k,p({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,p=new Array(i);p[0]=u;var d={};for(var o in t)hasOwnProperty.call(t,o)&&(d[o]=t[o]);d.originalType=e,d.mdxType="string"==typeof e?e:r,p[1]=d;for(var l=2;l<i;l++)p[l]=n[l];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1548:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>p,default:()=>s,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const i={title:"MoveDID Contract",slug:"/move-did-contract",hidden:!0,hide_table_of_contents:!1},p="MoveDID Contract",d={unversionedId:"move-did-contract",id:"move-did-contract",title:"MoveDID Contract",description:"See Source Files in:",source:"@site/docs/move-did-contract.md",sourceDirName:".",slug:"/move-did-contract",permalink:"/move-did-contract",draft:!1,editUrl:"https://github.com/NonceGeek/MoveDID/docs/move-did-contract.md",tags:[],version:"current",frontMatter:{title:"MoveDID Contract",slug:"/move-did-contract",hidden:!0,hide_table_of_contents:!1},sidebar:"defaultSidebar",previous:{title:"MoveDID Audit Report",permalink:"/move-did-audit-report"},next:{title:"MoveDID Manager",permalink:"/move-did-manager"}},o={},l=[{value:"0x01 ABI Documentation of MoveDID",id:"0x01-abi-documentation-of-movedid",level:2},{value:"1.1 Addr Aggregator",id:"11-addr-aggregator",level:3},{value:"1.1.1 Functions about Addr Aggregator",id:"111-functions-about-addr-aggregator",level:4},{value:"1.1.2 Functions about Addr",id:"112-functions-about-addr",level:4},{value:"1.2 Endpoint Aggregator",id:"12-endpoint-aggregator",level:3},{value:"1.3 Addr-*",id:"13-addr-",level:3},{value:"1.4 Init",id:"14-init",level:3},{value:"0x02 Quick Deployment Guide",id:"0x02-quick-deployment-guide",level:2},{value:"0x03 Prover of MoveDID",id:"0x03-prover-of-movedid",level:2}],c={toc:l};function s(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"movedid-contract"},"MoveDID Contract"),(0,r.kt)("p",null,"See Source Files in:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/NonceGeek/MoveDID/tree/main/did-aptos"},"https://github.com/NonceGeek/MoveDID/tree/main/did-aptos"))),(0,r.kt)("h2",{id:"0x01-abi-documentation-of-movedid"},"0x01 ABI Documentation of MoveDID"),(0,r.kt)("p",null,"In the Aptos Move contract(modules), methods marked as ",(0,r.kt)("inlineCode",{parentName:"p"},"public entry fun")," are publicly accessible."),(0,r.kt)("p",null,"The main entry in the MoveDID contract  are two modules: "),(0,r.kt)("p",null,"the ",(0,r.kt)("inlineCode",{parentName:"p"},"addr_aggregator")," module and the ",(0,r.kt)("inlineCode",{parentName:"p"},"endpoint_aggregator")," module."),(0,r.kt)("h3",{id:"11-addr-aggregator"},"1.1 Addr Aggregator"),(0,r.kt)("p",null,"Namespace: ",(0,r.kt)("inlineCode",{parentName:"p"},"my_addr::addr_aggregator")),(0,r.kt)("h4",{id:"111-functions-about-addr-aggregator"},"1.1.1 Functions about Addr Aggregator"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"create_addr_aggregator(acct: &signer, type: u64, description: String)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"Create the resource addr aggregator. The struct of addr aggregator:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"struct AddrAggregator has key {\n  key_addr: address,\n  addr_infos_map: Table<String, AddrInfo>,\n  addrs: vector<String>,\n  type: u64,\n  description: String,\n  max_id: u64,\n  add_addr_event_set: AddAddrEventSet,\n  update_addr_signature_event_set: UpdateAddrSignatureEventSet,\n  update_addr_event_set: UpdateAddrEventSet,\n  delete_addr_event_set: DeleteAddrEventSet,\n}\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"params description:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"description:")," the description of did."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"type:")," to distinct diffrent subjects of did: ",(0,r.kt)("inlineCode",{parentName:"li"},"HUMAN -- 0, ORG -- 1, ROBOT --  2"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"update_addr_aggregator_description(acct: &signer, description: String)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"params description:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"description:")," the description of did.")))),(0,r.kt)("h4",{id:"112-functions-about-addr"},"1.1.2 Functions about Addr"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"add_addr(acct: &signer, addr_type: u64, addr: String, pubkey: String, chains: vector<String>, description: String)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"Add a new addr. The addr without signature can be used as deposit address,"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"params description:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"addr_type:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"Ethereum -- 0, Aptos --1"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"addr:")," the address you would like to add to did, it should be begin with ",(0,r.kt)("inlineCode",{parentName:"li"},"0x"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"pubkey:")," using in key-pairs that can not recovery pubkey from signature."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"chains:")," where do you use this addr on? for example: ",(0,r.kt)("inlineCode",{parentName:"li"},'["ethereum", "polygon"]')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"description: "),"the description of the addr you added."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"update_eth_addr(acct: &signer, addr: String, signature: String) ")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"Update the eth addr that add by ",(0,r.kt)("inlineCode",{parentName:"p"},"add_addr"),", the msg can be saw in ",(0,r.kt)("inlineCode",{parentName:"p"},"AddrAggregator")," resource."),(0,r.kt)("p",{parentName:"li"},"The address updated with sig could use in more scenes.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"update_aptos_addr(acct: &signer, addr: String, signature: String)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"same as ",(0,r.kt)("inlineCode",{parentName:"p"},"update-eth-addr"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"update_addr_info_with_chains_and_description(acct: &signer, addr: String, chains: vector<String>, description: String)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"update addr info with the chains and description. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"update_addr_info_for_non_verification(acct: &signer, addr: String, chains: vector<String>, description: String)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"It's able to update the addr info that is non verification, such as the token receiver address.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"delete_addr(acct: &signer, addr: String)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"delete addr that is added.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"batch_add_addrs(acct: &signer, addrs: vector<String>, addr_infos: vector<AddrInfo>)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"add addrs in batch way!"))),(0,r.kt)("h3",{id:"12-endpoint-aggregator"},"1.2 Endpoint Aggregator"),(0,r.kt)("p",null,"Namespace: ",(0,r.kt)("inlineCode",{parentName:"p"},"my_addr::endpoint_aggregator")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"create_endpoint_aggregator(acct: &signer)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"Create the resource addr aggregator. The struct of addr aggregator:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"struct Endpoint has store, copy, drop {\n  url: String,\n  description: String,\n  verification_url: String\n}\n\nstruct EndpointAggregator has key {\n  key_addr: address,\n  endpoints_map: Table<String, Endpoint>,\n  names: vector<String>,\n  add_endpoint_event_set: AddEndpointEventSet,\n  update_endpoint_event_set: UpdateEndpointEventSet,\n  delete_endpoint_event_set: DeleteEndpointEventSet,\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"add_endpoint(acct: &signer, url: String, description: String, verification_url: String"),")"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"Add a new endpoint. It's optional to verify the endpoint by msg and verification_url. For example, verify the github account by gist with msg."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"params description:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"url:")," the link of endpoint url.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"description:")," the description of endpoint")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"verification_url:")," the link of verification of url, the key addr is the msg for payload.")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"update_endpoint(acct: &signer, url: String, new_description: String, new_url: String, new_verification_url: String)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"Update the eth endpoint that indexed by the url.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"delete_endpoint(acct: &signer, url: String)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"delete endpoint that is added.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"batch_add_endpoints(acct: &signer, names: vector<String>, endpoints: vector<Endpoint> )")))),(0,r.kt)("h3",{id:"13-addr-"},"1.3 Addr-*"),(0,r.kt)("p",null,"Namespace: ",(0,r.kt)("inlineCode",{parentName:"p"},"my_addr::addr-*"),", such as:",(0,r.kt)("inlineCode",{parentName:"p"},"my_addr:addr-aptos")),(0,r.kt)("p",null,"Impl ",(0,r.kt)("inlineCode",{parentName:"p"},"addr-*")," module to support more type of address!"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"update_addr(addr_info: &mut AddrInfo, signature: &mut String)")),(0,r.kt)("p",{parentName:"li"},"type: ",(0,r.kt)("inlineCode",{parentName:"p"},"public func")),(0,r.kt)("p",{parentName:"li"},"update addr with signature.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"update_*_addr(acct: &signer, addr: String, signature: String)")),(0,r.kt)("p",{parentName:"li"},"update addr func that can be called by signer."))),(0,r.kt)("h3",{id:"14-init"},"1.4 Init"),(0,r.kt)("p",null,"Namespace:",(0,r.kt)("inlineCode",{parentName:"p"},"my_addr::init")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"init(acct: &signer, type: u64, description: String)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"func description:")),(0,r.kt)("p",{parentName:"li"},"Init addr_aggregator and endpoint_aggregator in one func."))),(0,r.kt)("h2",{id:"0x02-quick-deployment-guide"},"0x02 Quick Deployment Guide"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Aptos CLI version >=1.0.0")),(0,r.kt)("p",null,"see the latest official guide in:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://aptos.dev/cli-tools/aptos-cli-tool/use-aptos-cli"},"https://aptos.dev/cli-tools/aptos-cli-tool/use-aptos-cli"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"step 0x01: run a local testnet")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"aptos node run-local-testnet --with-faucet\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"step 0x02: create an account")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"aptos init --profile local --rest-url http://localhost:8080 --faucet-url http://localhost:8081\nexport PROFILE=local\n")),(0,r.kt)("p",null,"Tips -- reset local network"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"aptos node run-local-testnet --with-faucet --force-restart\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"step 0x03: get faucet(devnet)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"aptos account fund-with-faucet --profile $PROFILE --account $PROFILE\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"step 0x04: compile contract")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"aptos move compile --package-dir [path]/MoveDID/did-aptos --named-addresses my_addr=$PROFILE\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"step 0x05: deploy")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"aptos move publish --package-dir [path]/MoveDID/did-aptos --named-addresses my_addr=$PROFILE --profile $PROFILE\n")),(0,r.kt)("h2",{id:"0x03-prover-of-movedid"},"0x03 Prover of MoveDID"),(0,r.kt)("p",null,"see in all the files that ended with ",(0,r.kt)("inlineCode",{parentName:"p"},"spec.move"),"."))}s.isMDXComponent=!0}}]);